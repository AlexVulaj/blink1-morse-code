const {calculateTimings} = require('./blinkmorse.js')

describe('Test individual characters', () => {
  describe('uppercase letters', () => {
    const cases = [
      ['A', [1, 1, 3]],
      ['B', [3, 1, 1, 1, 1, 1, 1]],
      ['C', [3, 1, 1, 1, 3, 1, 1]],
      ['D', [3, 1, 1, 1, 1]],
      ['E', [1]],
      ['F', [1, 1, 1, 1, 3, 1, 1]],
      ['G', [3, 1, 3, 1, 1]],
      ['H', [1, 1, 1, 1, 1, 1, 1]],
      ['I', [1, 1, 1]],
      ['J', [1, 1, 3, 1, 3, 1, 3]],
      ['K', [3, 1, 1, 1, 3]],
      ['L', [1, 1, 3, 1, 1, 1, 1]],
      ['M', [3, 1, 3]],
      ['N', [3, 1, 1]],
      ['O', [3, 1, 3, 1, 3]],
      ['P', [1, 1, 3, 1, 3, 1, 1]],
      ['Q', [3, 1, 3, 1, 1, 1, 3]],
      ['R', [1, 1, 3, 1, 1]],
      ['S', [1, 1, 1, 1, 1]],
      ['T', [3]],
      ['U', [1, 1, 1, 1, 3]],
      ['V', [1, 1, 1, 1, 1, 1, 3]],
      ['W', [1, 1, 3, 1, 3]],
      ['X', [3, 1, 1, 1, 1, 1, 3]],
      ['Y', [3, 1, 1, 1, 3, 1, 3]],
      ['Z', [3, 1, 3, 1, 1, 1, 1]]
    ]

    test.each(cases)('%p', (input, expected) => {
      expect(calculateTimings(input)).toEqual(expected)
    })

  })

  describe('lowercase letters', () => {
    const cases = [
      ['a', [1, 1, 3]],
      ['b', [3, 1, 1, 1, 1, 1, 1]],
      ['c', [3, 1, 1, 1, 3, 1, 1]],
      ['d', [3, 1, 1, 1, 1]],
      ['e', [1]],
      ['f', [1, 1, 1, 1, 3, 1, 1]],
      ['g', [3, 1, 3, 1, 1]],
      ['h', [1, 1, 1, 1, 1, 1, 1]],
      ['i', [1, 1, 1]],
      ['j', [1, 1, 3, 1, 3, 1, 3]],
      ['k', [3, 1, 1, 1, 3]],
      ['l', [1, 1, 3, 1, 1, 1, 1]],
      ['m', [3, 1, 3]],
      ['n', [3, 1, 1]],
      ['o', [3, 1, 3, 1, 3]],
      ['p', [1, 1, 3, 1, 3, 1, 1]],
      ['q', [3, 1, 3, 1, 1, 1, 3]],
      ['r', [1, 1, 3, 1, 1]],
      ['s', [1, 1, 1, 1, 1]],
      ['t', [3]],
      ['u', [1, 1, 1, 1, 3]],
      ['v', [1, 1, 1, 1, 1, 1, 3]],
      ['w', [1, 1, 3, 1, 3]],
      ['x', [3, 1, 1, 1, 1, 1, 3]],
      ['y', [3, 1, 1, 1, 3, 1, 3]],
      ['z', [3, 1, 3, 1, 1, 1, 1]]
    ]

    test.each(cases)('%p', (input, expected) => {
      expect(calculateTimings(input)).toEqual(expected)
    })

  })

  describe('numbers', () => {
    const cases = [
      ['1', [1, 1, 3, 1, 3, 1, 3, 1, 3]],
      ['2', [1, 1, 1, 1, 3, 1, 3, 1, 3]],
      ['3', [1, 1, 1, 1, 1, 1, 3, 1, 3]],
      ['4', [1, 1, 1, 1, 1, 1, 1, 1, 3]],
      ['5', [1, 1, 1, 1, 1, 1, 1, 1, 1]],
      ['6', [3, 1, 1, 1, 1, 1, 1, 1, 1]],
      ['7', [3, 1, 3, 1, 1, 1, 1, 1, 1]],
      ['8', [3, 1, 3, 1, 3, 1, 1, 1, 1]],
      ['9', [3, 1, 3, 1, 3, 1, 3, 1, 1]],
      ['0', [3, 1, 3, 1, 3, 1, 3, 1, 3]]
    ]

    test.each(cases)('%p', (input, expected) => {
      expect(calculateTimings(input)).toEqual(expected)
    })
  })
})

describe('Test single words', () => {
  const cases = [
    ['sos', [1, 1, 1, 1, 1, 3, 3, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1]],
    ['Hello', [1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 3, 1, 3]],
    ['Blink1', [3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 3, 3, 1, 1, 3, 1, 3,
      1, 3, 1, 3]]
  ]

  test.each(cases)('%p', (input, expected) => {
    expect(calculateTimings(input)).toEqual(expected)
  })
})

describe('Test multiple words', () => {
  const cases = [
    ['Hello World', [1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 3, 1, 3, 7, 1,
      1, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1]]
  ]

  test.each(cases)('%p', (input, expected) => {
    expect(calculateTimings(input)).toEqual(expected)
  })
});

describe('Test edge cases', () => {
  const cases = [
    ['Non-string input', 123, [1, 1, 3, 1, 3, 1, 3, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3]],
    ['Containing symbols', 'Hello, world!', [1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1,
      3, 3, 1, 3, 1, 3, 7, 1, 1, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1]]
  ]

  test.each(cases)('%p', (title, input, expected) => {
    expect(calculateTimings(input)).toEqual(expected)
  })
})